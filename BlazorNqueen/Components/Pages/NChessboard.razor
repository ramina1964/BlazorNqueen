@inject IJSRuntime JS
@inject ILogger<NChessboard> logger

<style>
    .chessboard {
        display: grid;
        grid-template-columns: repeat(@BoardSize, 1fr);
        grid-template-rows: repeat(@BoardSize, 1fr);
        width: 60%; /* The chessboard will fill the width of its container */
        height: auto; /* The height will be set automatically based on the width */
        aspect-ratio: 1; /* Keep the aspect ratio of the board square */
    }

    .square {
        position: relative; /* Needed to position the image inside the square */
    }

        .square img {
            position: absolute;
            width: 100%;
            height: 100%;
        }

    .whiteSquare {
        background-color: @_whiteSquareColor;
    }

    .blackSquare {
        background-color: @_blackSquareColor;
    }
</style>


<img id="queen" src="/img/wQ.png" alt="Queen" style="display: none;" />

<div id="gui" class="chessboard">
    @for (int row = BoardSize - 1; row >= 0; row--)
    {
        for (int col = 0; col < BoardSize; col++)
        {
            <div id="square-@row-@col" class="square @((row + col) % 2 == 0 ? "blackSquare" : "whiteSquare")">
                @* <span style="color:black; margin:2px; ">@col-@row</span> *@
            </div>
        }
    }
</div>

<div style="margin:12px;">
    @if (ShowDebuggingTools)
    {
        <button Size="Size.Large" @onclick="SetQueenOnRandomSquare">Place queen random </button>
        <button Size="Size.Large" @onclick="ClearBoard">Clear board </button>
        <button Size="Size.Large" @onclick="RenderLabels">Render labels </button>
        <button Size="Size.Large" @onclick="ChangeBoardSize">Change boardsize </button>
    }
</div>
